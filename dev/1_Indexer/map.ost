
  TYPE highway_residential_area                             = AREA ("highway"=="residential" AND "area"=="yes")

  TYPE highway_service_area                                 = AREA ("highway"=="service" AND "area"=="yes")

  TYPE highway_pedestrian_area                              = AREA ("highway"=="pedestrian" AND "area"=="yes")

  TYPE highway_footway_area                                 = AREA ("highway"=="footway" AND "area"=="yes")

  TYPE highway_bus_stop                                     = NODE ("highway"=="bus_stop" OR (!("bus" IN ["no", "false", "0"]) AND ("public_transport" IN ["platform", "stop_position"])))

  TYPE highway_motorway_junction                            = NODE ("highway"=="motorway_junction")


  TYPE waterway_intermittent_stream                         = WAY ("waterway"=="stream" AND "intermittent"=="yes")

  TYPE waterway_intermittent_river                          = WAY ("waterway"=="river" AND "intermittent"=="yes")

  TYPE waterway_intermittent_canal                          = WAY ("waterway"=="canal" AND "intermittent"=="yes")

  TYPE waterway_intermittent_ditch                          = WAY ("waterway"=="ditch" AND "intermittent"=="yes")

  TYPE waterway_intermittent_drain                          = WAY ("waterway"=="drain" AND "intermittent"=="yes")

  TYPE waterway_stream                                      = WAY ("waterway"=="stream")

  TYPE waterway_river                                       = WAY ("waterway"=="river")

  TYPE waterway_riverbank                                   = AREA ("waterway"=="riverbank" OR ("natural"=="water" AND  "water"=="river"))

  TYPE waterway_canal                                       = WAY ("waterway"=="canal")

  TYPE waterway_ditch                                       = WAY ("waterway"=="ditch")

  TYPE waterway_drain                                       = WAY ("waterway"=="drain")

  TYPE waterway_dock                                        = NODE AREA ("waterway"=="dock")

  TYPE waterway_lock_gate                                   = NODE ("waterway"=="lock_gate")

  TYPE waterway_turning_point                               = NODE ("waterway"=="turning_point")

  TYPE waterway_boatyard                                    = NODE AREA ("waterway"=="boatyard")

  TYPE waterway_waterfall                                   = NODE ("waterway"=="waterfall")

  //
  // Railways and assorted
  //

  TYPE railway_rail
    = WAY ("railway"=="rail")
      {Bridge, Tunnel, Width}
      OPTIMIZE_LOW_ZOOM

  TYPE railway_tram
    = WAY ("railway"=="tram")
      {Bridge, Tunnel, Width}

  TYPE railway_light_rail
    = WAY ("railway"=="light_rail")
      {Bridge, Tunnel, Width}
      OPTIMIZE_LOW_ZOOM

  TYPE railway_subway
    = WAY ("railway"=="subway")

  TYPE railway_preserved
    = WAY ("railway"=="preserved")
      OPTIMIZE_LOW_ZOOM

  TYPE railway_disused
    = WAY ("railway"=="disused")
      {Bridge, Tunnel, Width}

  TYPE railway_abandoned
    = WAY ("railway"=="abandoned")
      {Bridge, Tunnel, Width}

  TYPE railway_narrow_gauge
    = WAY ("railway"=="narrow_gauge")
      OPTIMIZE_LOW_ZOOM

  TYPE railway_monorail
    = WAY ("railway"=="monorail")

  TYPE railway_funicular
    = WAY ("railway"=="funicular")

  TYPE railway_station
    = NODE AREA ("railway"=="station")
      GROUP routingPOI

  TYPE railway_halt
    = NODE ("railway"=="halt")

  TYPE railway_tram_stop
    = NODE ("railway"=="tram_stop" OR (("tram" IN ["yes", "true", "1"]) AND ("public_transport" IN ["platform", "stop_position"])))

  TYPE railway_crossing
    = NODE ("railway"=="crossing")

  TYPE railway_level_crossing
    = NODE ("railway"=="level_crossing")

  TYPE railway_subway_entrance
    = NODE ("railway"=="subway_entrance")

  TYPE railway_turntable
    = NODE AREA ("railway"=="turntable")
      {Bridge, Tunnel}

  TYPE public_transport_platform
     = WAY AREA ("public_transport"=="platform" OR
                 "railway"=="platform" OR
                 "highway"=="platform")

  //
  // Aerialway (http://wiki.openstreetmap.org/wiki/Key:aerialway)
  //

  TYPE aerialway_gondola
    = WAY (("aerialway"=="gondola") OR ("aerialway"=="cable_car"))
      {Name}

  TYPE aerialway_chair_lift
    = WAY (("aerialway"=="chair_lift") OR ("aerialway"=="mixed_lift"))
      {Name}

  TYPE aerialway_drag_lift
    = WAY (("aerialway"=="drag_lift") OR ("aerialway"=="t-bar") OR ("aerialway"=="j-bar") OR ("aerialway"=="platter") OR ("aerialway"=="rope_tow") OR ("aerialway"=="magic_carpet"))
      {Name}

  TYPE aerialway_pylon
   = NODE ("aerialway"=="pylon")

  TYPE aerialway_station
   = NODE ("aerialway"=="station")
    {Name, NameAlt}

  //
  // Winter sports
  //

  TYPE piste_downhill_easy
    = WAY AREA ("piste:type"=="downhill" AND "piste:difficulty"=="easy")
      {Name}

  TYPE piste_downhill_intermediate
    = WAY AREA ("piste:type"=="downhill" AND "piste:difficulty"=="intermediate")
      {Name}

  TYPE piste_downhill_advanced
    = WAY AREA ("piste:type"=="downhill" AND "piste:difficulty"=="advanced")
      {Name}

  //
  // air transport
  //

  TYPE aeroway_aerodrome
    = NODE AREA ("aeroway"=="aerodrome")

  TYPE aeroway_terminal
    = NODE AREA ("aeroway"=="terminal")

  TYPE aeroway_helipad
    = NODE AREA ("aeroway"=="helipad")

  TYPE aeroway_runway
    = WAY AREA ("aeroway"=="runway") // Officially not AREA!
      {Ref, Width}

  TYPE aeroway_taxiway
    = WAY ("aeroway"=="taxiway")
      {Ref, Width} PIN_WAY

  TYPE aeroway_apron
    = AREA ("aeroway"=="apron")
      {Ref}

  TYPE aeroway_gate
    = NODE ("aeroway"=="gate")

  //
  // Landuses
  //

  TYPE landuse_allotments
    = NODE AREA ("landuse"=="allotments")
      GROUP landuse

  TYPE landuse_basin
    = NODE AREA ("landuse"=="basin")
      GROUP landuse
   
  TYPE landuse_brownfield
    = AREA ("landuse"=="brownfield")
      GROUP landuse

  TYPE landuse_cemetery
    = AREA ("landuse"=="cemetery")
      GROUP landuse

  TYPE landuse_commercial
    = NODE AREA ("landuse"=="commercial")
      GROUP landuse

  TYPE landuse_construction
    = NODE AREA ("landuse"=="construction")
      GROUP landuse

  TYPE landuse_farm
    = AREA ("landuse"=="farm")
      OPTIMIZE_LOW_ZOOM
      GROUP landuse

  TYPE landuse_farmland
    = AREA ("landuse"=="farmland")
      GROUP landuse

  TYPE landuse_farmyard_building
    = AREA ("landuse"=="farmyard"AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP landuse

  TYPE landuse_farmyard
    = AREA ("landuse"=="farmyard")
      GROUP landuse

  TYPE wood
    = NODE AREA ("landuse"=="forest" OR "natural"=="wood" OR "landcover"=="trees")
      GROUP landuse

  TYPE landuse_garages
    = AREA ("landuse"=="garages")
      GROUP landuse

  TYPE landuse_grass
    = NODE AREA ("landuse"=="grass")
      GROUP landuse

  TYPE landuse_greenfield
    = NODE AREA ("landuse"=="greenfield")
      GROUP landuse

  TYPE landuse_greenhouse_horticulture
    = AREA ("landuse"=="greenhouse_horticulture")
      GROUP landuse

  TYPE landuse_industrial
    = NODE AREA ("landuse"=="industrial")
      GROUP landuse

  TYPE landuse_landfill
    = NODE AREA ("landuse"=="landfill")
      GROUP landuse

  TYPE landuse_meadow
    = NODE AREA ("landuse"=="meadow")
      GROUP landuse

  TYPE landuse_military
    = NODE AREA ("landuse"=="military")
      GROUP landuse

  TYPE landuse_orchard
    = NODE AREA ("landuse"=="orchard")
      GROUP landuse

  TYPE landuse_piste
    = NODE AREA ("landuse"=="piste")
      GROUP landuse

  TYPE landuse_quarry
    = NODE AREA ("landuse"=="quarry")
      GROUP landuse

  TYPE landuse_railway
    = AREA ("landuse"=="railway")
      GROUP landuse

  TYPE landuse_recreation_ground
    = NODE AREA ("landuse"=="recreation_ground")
      GROUP landuse

  TYPE landuse_reservoir
    = NODE AREA ("landuse"=="reservoir")
      GROUP landuse

  TYPE landuse_residential
    = NODE AREA ("landuse"=="residential")
      GROUP landuse

  TYPE landuse_retail
    = NODE AREA ("landuse"=="retail")
      GROUP landuse

  TYPE landuse_salt_pond
    = AREA ("landuse"=="salt_pond")
      GROUP landuse

  TYPE landuse_village_green
    = NODE AREA ("landuse"=="village_green")
      GROUP landuse

  TYPE landuse_vineyard
    = AREA ("landuse"=="vineyard")
      GROUP landuse
            
  //
  // Natural
  //

  TYPE natural_bay
    = NODE AREA ("natural"=="bay")

  TYPE natural_beach
    = NODE AREA ("natural"=="beach")

  TYPE natural_reef
    = NODE AREA ("natural"=="reef")

  TYPE natural_bare_rock
    = NODE AREA ("natural"=="bare_rock")

  TYPE natural_cave_entrance
    = NODE AREA ("natural"=="cave_entrance")

  TYPE natural_cliff
    = NODE WAY ("natural"=="cliff")
      PIN_WAY

  TYPE natural_ridge
    = NODE WAY ("natural"=="ridge")
      PIN_WAY

  TYPE natural_valley
    = NODE WAY ("natural"=="valley")

  TYPE natural_fell
    = NODE AREA ("natural"=="fell")

  TYPE natural_glacier
    = NODE AREA ("natural"=="glacier")

  TYPE natural_grassland
    = AREA ("natural"=="grassland")

  TYPE natural_heath
    = NODE AREA ("natural"=="heath")

  TYPE natural_land
    = NODE AREA ("natural"=="land")

  TYPE natural_mud
    = AREA ("natural"=="mud")

  TYPE natural_peak
    = NODE ("natural"=="peak")

  TYPE natural_sand
    = AREA ("natural"=="sand")

  TYPE natural_scree
    = NODE AREA ("natural"=="scree")

  TYPE natural_scrub
    = NODE AREA ("natural"=="scrub")

  TYPE natural_spring
    = NODE ("natural"=="spring")

  TYPE natural_volcano
    = NODE ("natural"=="volcano")

  TYPE natural_wetland_marsh
    = NODE AREA ("natural"=="wetland" AND "wetland"=="marsh")

  TYPE natural_wetland_tidalflat
    = NODE AREA ("natural"=="wetland" AND "wetland"=="tidalflat")

  TYPE natural_wetland
    = NODE AREA ("natural"=="wetland")

  //
  // Man made
  //

  TYPE man_made_bridge IGNORE
    = AREA ("man_made"=="bridge")

  TYPE man_made_pier
    = WAY AREA ("man_made"=="pier")

  TYPE man_made_wastewater_plant
    = NODE AREA ("man_made"=="wastewater_plant")
	  
   TYPE man_made_cross
   = NODE ("man_made"=="cross")
	  {Name, NameAlt}
	  POI

  //
  // Leisure
  //

  TYPE leisure_building
    = AREA (EXISTS "leisure" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
     POI
     MERGE_AREAS

  TYPE leisure_sports_centre
    = NODE AREA ("leisure"=="sports_centre")

  TYPE leisure_stadium
    = NODE AREA ("leisure"=="stadium")

  TYPE leisure_track
    = NODE WAY AREA ("leisure"=="track")

  TYPE leisure_pitch
    = NODE AREA ("leisure"=="pitch")
          
  TYPE leisure_golf_course
    = NODE AREA ("leisure"=="golf_course")

  TYPE leisure_water_park
    = NODE AREA ("leisure"=="water_park")

  TYPE leisure_swimming_pool
    = NODE AREA ("leisure"=="swimming_pool" AND !("covered" IN ["yes"]) AND !("indoor" IN ["yes"]))
            
  TYPE leisure_marina
    = NODE AREA ("leisure"=="marina")

  TYPE leisure_slipway
    = NODE ("leisure"=="slipway")

  TYPE leisure_fishing
    = NODE AREA ("leisure"=="fishing")

  TYPE boundary_strict_natural_reserve
    = AREA RELATION (("boundary"=="national_park" OR "boundary"=="protected_area") AND "protect_class"=="1")
      {ShortName, Name, NameAlt}
      // national park may be relation of boundary type, but we always want to handle it as a multipolygon
      MULTIPOLYGON OPTIMIZE_LOW_ZOOM MERGE_AREAS

  TYPE boundary_national_park
    = AREA RELATION (("boundary"=="national_park" OR "boundary"=="protected_area") AND "protect_class"=="2")
      {ShortName, Name, NameAlt}
      // national park may be relation of boundary type, but we always want to handle it as a multipolygon
      MULTIPOLYGON OPTIMIZE_LOW_ZOOM MERGE_AREAS

  TYPE boundary_natural_monument
    = AREA RELATION (("boundary"=="national_park" OR "boundary"=="protected_area") AND "protect_class"=="3")
      {ShortName, Name, NameAlt}
      // national park may be relation of boundary type, but we always want to handle it as a multipolygon
      MULTIPOLYGON OPTIMIZE_LOW_ZOOM MERGE_AREAS
	  
  TYPE boundary_natural_reserve
    = AREA RELATION (("boundary"=="national_park" OR "boundary"=="protected_area") AND "protect_class"=="4")
      {ShortName, Name, NameAlt}
      // national park may be relation of boundary type, but we always want to handle it as a multipolygon
      MULTIPOLYGON OPTIMIZE_LOW_ZOOM MERGE_AREAS
	  
  TYPE boundary_protected_landscape
	= AREA RELATION (("boundary"=="national_park" OR "boundary"=="protected_area") AND "protect_class"=="5")
	  {ShortName, Name, NameAlt}
	  // regional park may be relation of boundary type, but we always want to handle it as a multipolygon
	  MULTIPOLYGON OPTIMIZE_LOW_ZOOM MERGE_AREAS

  TYPE leisure_nature_reserve
    = NODE AREA ("leisure"=="nature_reserve")

  TYPE leisure_park
    = NODE AREA ("leisure"=="park")

  TYPE leisure_playground
    = NODE AREA ("leisure"=="playground")

  TYPE leisure_garden
    = NODE AREA ("leisure"=="garden")
	  MERGE_AREAS

  TYPE leisure_common
    = NODE AREA ("leisure"=="common")

  TYPE leisure_ice_rink
    = NODE AREA ("leisure"=="ice_rink")
      OPTIMIZE_LOW_ZOOM

  //
  // Amenity
  //

  TYPE amenity_bank_building
    = AREA ("amenity"=="bank" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      POI
      GROUP amenity, building

  TYPE amenity_bank
    = NODE AREA ("amenity"=="bank")
      GROUP amenity

  TYPE amenity_bicycle_parking_building
    = AREA ("amenity"=="bicycle_parking" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP amenity, building

  TYPE amenity_bus_station
    = NODE AREA ("amenity"=="bus_station")
      GROUP amenity

  TYPE amenity_cafe_building
    = AREA ("amenity"=="cafe" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP amenity, building

  TYPE amenity_cafe
    = NODE AREA ("amenity"=="cafe")
      GROUP amenity

  TYPE amenity_charging_station
    = NODE ("amenity"=="charging_station")
      GROUP amenity

  TYPE amenity_fast_food_building
    = AREA ("amenity"=="fast_food" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP amenity, building

  TYPE amenity_fast_food
    = NODE AREA ("amenity"=="fast_food")
      GROUP amenity

  TYPE amenity_grave_yard
    = NODE AREA ("amenity"=="grave_yard")
      GROUP amenity

  // Churches
  TYPE christian_church_building
    = AREA ("amenity"=="place_of_worship" AND
            "religion"=="christian" AND
            EXISTS "building" AND !("building" IN ["no","false","0"]))

  TYPE christian_church
    = NODE AREA ("amenity"=="place_of_worship" AND
            "religion"=="christian")

  // Buddhist shrine
  TYPE buddhist_shrine_building
    = AREA ("amenity"=="place_of_worship" AND
            "religion"=="buddhist" AND
            EXISTS "building" AND !("building" IN ["no","false","0"]))

  TYPE buddhist_shrine
    = NODE AREA ("amenity"=="place_of_worship" AND
            "religion"=="buddhist")

  // Shinto shrine
  TYPE shinto_shrine_building
    = AREA ("amenity"=="place_of_worship" AND
            "religion"=="shinto" AND
            EXISTS "building" AND !("building" IN ["no","false","0"]))

  TYPE shinto_shrine
    = NODE AREA ("amenity"=="place_of_worship" AND
            "religion"=="shinto")

  // Jewish synagogue
  TYPE jewish_synagogue_building
    = AREA ("amenity"=="place_of_worship" AND
            "religion"=="jewish" AND
            EXISTS "building" AND !("building" IN ["no","false","0"]))

  TYPE jewish_synagogue
    = NODE AREA ("amenity"=="place_of_worship" AND
            "religion"=="jewish")

  // Muslim mosque
  TYPE muslim_mosque_building
    = AREA ("amenity"=="place_of_worship" AND
            "religion"=="muslim" AND
            EXISTS "building" AND !("building" IN ["no","false","0"]))

  TYPE muslim_mosque
    = NODE AREA ("amenity"=="place_of_worship" AND
            "religion"=="muslim")

  // Other place of worship
  TYPE worship_building
    = AREA ("amenity"=="place_of_worship" AND
      	   EXISTS "building" AND !("building" IN ["no","false","0"]))

  TYPE worship
    = NODE AREA ("amenity"=="place_of_worship")

  // Everything else is just an 'amenity' for now
  TYPE amenity_building
    = AREA (EXISTS "amenity" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP amenity, building

  TYPE amenity
    = NODE (EXISTS "amenity")
      GROUP amenity

  //
  // Shops
  //

  // Everything else is just an 'amenity' for now
  TYPE shop_building
    = AREA (EXISTS "shop" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP amenity, building, routingPOI

  // Currently all shops are the same...
  TYPE shop
    = NODE AREA (EXISTS "shop")
      GROUP amenity, routingPOI

  //
  // Tourism
  //

  TYPE tourism_aquarium
    = NODE AREA ("tourism"=="aquarium")
      GROUP tourism

  TYPE tourism_attraction_building
    = NODE AREA ("tourism"=="attraction" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP tourism, building

  TYPE tourism_attraction
    = NODE AREA ("tourism"=="attraction")
      GROUP tourism

  TYPE tourism_artwork
    = NODE WAY AREA ("tourism"=="artwork")
      GROUP tourism

  TYPE tourism_camp_site
    = NODE AREA ("tourism"=="camp_site")
      GROUP tourism

  TYPE tourism_caravan_site
    = NODE AREA ("tourism"=="caravan_site")
      GROUP tourism

  TYPE tourism_picnic_site
    = NODE AREA ("tourism"=="picnic_site")
      GROUP tourism

  TYPE tourism_theme_park
    = NODE AREA ("tourism"=="theme_park")
      GROUP tourism

  TYPE tourism_viewpoint
    = NODE ("tourism"=="viewpoint")
      GROUP tourism

  TYPE tourism_zoo
    = NODE AREA ("tourism"=="zoo")
      GROUP tourism

  TYPE tourism_alpine_hut_building
    = AREA ("tourism"=="alpine_hut" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP tourism, building

  TYPE tourism_alpine_hut
    = NODE AREA ("tourism"=="alpine_hut")
      GROUP tourism

  TYPE tourism_chalet_building
    = AREA ("tourism"=="chalet" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP tourism, building

  TYPE tourism_chalet
    = NODE AREA ("tourism"=="chalet")
      GROUP tourism

  TYPE tourism_guest_house_building
    = AREA ("tourism"=="guest_house" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP tourism, building

  TYPE tourism_guest_house
    = NODE AREA ("tourism"=="guest_house")
      GROUP tourism

  TYPE tourism_hostel_building
    = AREA ("tourism"=="hostel" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP tourism, building

  TYPE tourism_hostel
    = NODE AREA ("tourism"=="hostel")
      GROUP tourism

  TYPE tourism_hotel_building
    = AREA ("tourism"=="hotel" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP tourism, building

  TYPE tourism_hotel
    = NODE AREA ("tourism"=="hotel")
      GROUP tourism

  TYPE tourism_information_guidepost
    = NODE ("tourism"=="information" AND "information"=="guidepost")
      GROUP tourism

  TYPE tourism_information_building
    = AREA ("tourism"=="information" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP tourism, building

  TYPE tourism_information
    = NODE AREA ("tourism"=="information")
      GROUP tourism

  TYPE tourism_motel_building
    = AREA ("tourism"=="motel" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP tourism, building

  TYPE tourism_motel
    = NODE AREA ("tourism"=="motel")
      GROUP tourism

  TYPE tourism_museum_building
    = AREA ("tourism"=="museum" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP tourism, building

  TYPE tourism_museum
    = NODE AREA ("tourism"=="museum")
      GROUP tourism

  TYPE tourism_building
    = AREA (EXISTS "tourism" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP tourism, building

  TYPE tourism
    = NODE AREA (EXISTS "tourism")
      GROUP tourism

  //
  // Historic
  //

  TYPE historic_castle_building
    = AREA ("historic"=="castle" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP historic, building

  TYPE historic_castle
    = NODE AREA ("historic"=="castle")
      GROUP historic

  TYPE historic_manor_building
    = AREA ("historic"=="manor" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP historic, building

  TYPE historic_manor
    = NODE AREA ("historic"=="manor")
      GROUP historic

  TYPE historic_monument_building
    = AREA ("historic"=="monument" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP historic, building

  TYPE historic_monument
    = NODE AREA ("historic"=="monument")
      GROUP historic

  TYPE historic_memorial_building
    = AREA ("historic"=="memorial" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP historic, building

  TYPE historic_memorial
    = NODE AREA ("historic"=="memorial")
      GROUP historic

  TYPE historic_ruins
    = NODE WAY AREA ("historic"=="ruins")
      GROUP historic
       
  TYPE historic_archaeological_site
    = NODE WAY AREA ("historic"=="archaeological_site")
      GROUP historic

  TYPE historic_battlefield
    = NODE AREA ("historic"=="battlefield")
      GROUP historic

  TYPE historic_wreck
    = NODE AREA ("historic"=="wreck")
      GROUP historic

  TYPE historic_building
    = AREA (EXISTS "historic" AND EXISTS "building" AND !("building" IN ["no","false","0"]))
      GROUP historic, building

  TYPE historic_archaeological_site
    = NODE AREA ("historic"=="archaeological_site")
      GROUP historic   

  TYPE historic_citywalls
    = WAY AREA ("historic"=="citywalls")
      GROUP historic   

  TYPE historic_wayside_cross
    = NODE ("historic"=="wayside_cross")
      GROUP historic

  TYPE historic
    = NODE WAY AREA (EXISTS "historic")
      GROUP historic

  //
  // Military
  //

  TYPE military_airfield
    = NODE AREA ("military"=="airfield")

  TYPE military_bunker_building
    = NODE AREA ("military"=="bunker" AND EXISTS "building" AND !("building" IN ["no","false","0"]))

  TYPE military_bunker
    = NODE AREA ("military"=="bunker")

  TYPE military_barracks
    = NODE AREA ("military"=="barracks")

  TYPE military_danger_area
    = NODE AREA ("military"=="danger_area")

  TYPE military_range
    = NODE AREA ("military"=="range")

  TYPE military_naval_base
    = NODE AREA ("military"=="naval_base")

  //
  // Sport
  // INFO: We expect that only the "node" variant will appear, since the area version should be
  // handled by "building", "pitch" or similar areas.
  // See http://wiki.openstreetmap.org/wiki/Key:sport
  //

  TYPE sport_building
    = AREA (EXISTS "sport" AND EXISTS "building" AND !("building" IN ["no","false","0"]))

  TYPE sport_9pin
    = NODE AREA ("sport"=="9pin")

  TYPE sport_10pin
    = NODE AREA ("sport"=="10pin")

  TYPE sport_archery
    = NODE AREA ("sport"=="archery")

  TYPE sport_athletics
    = NODE AREA ("sport"=="athletics")

  TYPE sport_australian_football
    = NODE AREA ("sport"=="australian_football")

  TYPE sport_baseball
    = NODE AREA ("sport"=="baseball")

  TYPE sport_basketball
    = NODE AREA ("sport"=="basketball")

  TYPE sport_beachvolleyball
    = NODE AREA ("sport"=="beachvolleyball")

  TYPE sport_boules
    = NODE AREA ("sport"=="boules")

  TYPE sport_bowls
    = NODE AREA ("sport"=="bowls")

  TYPE sport_canoe
    = NODE AREA ("sport"=="canoe")

  TYPE sport_chess
    = NODE AREA ("sport"=="chess")

  TYPE sport_climbing
    = NODE AREA ("sport"=="climbing")

  TYPE sport_cricket
    = NODE AREA ("sport"=="cricket")

  TYPE sport_cricket_nets
    = NODE AREA ("sport"=="cricket_nets")

  TYPE sport_croquet
    = NODE AREA ("sport"=="croquet")

  TYPE sport_cycling
    = NODE AREA ("sport"=="cycling")

  TYPE sport_dog_racing
    = NODE AREA ("sport"=="dog_racing")

  TYPE sport_equestrian
    = NODE AREA ("sport"=="equestrian")

  TYPE sport_football
    = NODE AREA ("sport"=="football")

  TYPE sport_golf
    = NODE AREA ("sport"=="golf")

  TYPE sport_gymnastics
    = NODE AREA ("sport"=="gymnastics")

  TYPE sport_hockey
    = NODE AREA ("sport"=="hockey")

  TYPE sport_horse_racing
    = NODE AREA ("sport"=="horse_racing")

  TYPE sport_motor
    = NODE AREA ("sport"=="motor")

  TYPE sport_multi
    = NODE AREA ("sport"=="multi")

  TYPE sport_orienteering
    = NODE AREA ("sport"=="orienteering")

  TYPE sport_paddle_tennis
    = NODE AREA ("sport"=="paddle_tennis")

  TYPE sport_pelota
    = NODE AREA ("sport"=="pelota")

  TYPE sport_raquet
    = NODE AREA ("sport"=="raquet")

  TYPE sport_rowing
    = NODE AREA ("sport"=="rowing")

  TYPE sport_rugby
    = NODE AREA ("sport"=="rugby")

  TYPE sport_shooting
    = NODE AREA ("sport"=="shooting")

  TYPE sport_skating
    = NODE AREA ("sport"=="skating")

  TYPE sport_skateboard
    = NODE AREA ("sport"=="skateboard")

  TYPE sport_skiing
    = NODE AREA ("sport"=="skiing")

  TYPE sport_soccer 
    = NODE AREA ("sport"=="soccer")

  TYPE sport_swimming
    = NODE AREA ("sport"=="swimming")

  TYPE sport_table_tenis
    = NODE AREA ("sport"=="table_tenis")

  TYPE sport_team_handball
    = NODE AREA ("sport"=="team_handball")

  TYPE sport_tennis
    = NODE AREA ("sport"=="tennis")

  TYPE sport_volleyball
    = NODE AREA ("sport"=="volleyball")

  TYPE sport
    = NODE AREA (EXISTS "sport")

  //
  // Regions, locations, cities stuff
  //

  // Do not delete the following type, they are required by the GenLocation import step
  TYPE boundary_country_maritime
    = WAY AREA ("boundary"=="administrative" AND "admin_level"=="2" AND "maritime"=="yes") OR
      RELATION ("type"=="boundary" AND "boundary"=="administrative" AND "admin_level"=="2" AND "maritime"=="yes")
      MULTIPOLYGON IGNORESEALAND OPTIMIZE_LOW_ZOOM

  TYPE boundary_country
    = WAY AREA ("boundary"=="administrative" AND "admin_level"=="2") OR
      RELATION ("type"=="boundary" AND "boundary"=="administrative" AND "admin_level"=="2")
      MULTIPOLYGON IGNORESEALAND OPTIMIZE_LOW_ZOOM

  TYPE boundary_state_maritime
    = WAY AREA ("boundary"=="administrative" AND "admin_level"=="4" AND "maritime"=="yes") OR
      RELATION ("type"=="boundary" AND "boundary"=="administrative" AND "admin_level"=="4" AND "maritime"=="yes")
      MULTIPOLYGON IGNORESEALAND OPTIMIZE_LOW_ZOOM

  TYPE boundary_state
    = WAY AREA ("boundary"=="administrative" AND "admin_level"=="4") OR
      RELATION ("type"=="boundary" AND "boundary"=="administrative" AND "admin_level"=="4")
      MULTIPOLYGON IGNORESEALAND OPTIMIZE_LOW_ZOOM

  TYPE boundary_county_maritime
    = WAY AREA ("boundary"=="administrative" AND "admin_level"=="6" AND "maritime"=="yes") OR
      RELATION ("type"=="boundary" AND "boundary"=="administrative" AND "admin_level"=="6" AND "maritime"=="yes")
      MULTIPOLYGON IGNORESEALAND OPTIMIZE_LOW_ZOOM

  TYPE boundary_county
    = WAY AREA ("boundary"=="administrative" AND "admin_level"=="6") OR
      RELATION ("type"=="boundary" AND "boundary"=="administrative" AND "admin_level"=="6")
      MULTIPOLYGON IGNORESEALAND OPTIMIZE_LOW_ZOOM

  TYPE boundary_administrative
    = WAY AREA ("boundary"=="administrative") OR
      RELATION ("type"=="boundary" AND "boundary"=="administrative")
      MULTIPOLYGON IGNORESEALAND OPTIMIZE_LOW_ZOOM

  TYPE place_continent
    = NODE AREA ("place"=="continent")

  // Not part of the administrative boundary hierachy?
  TYPE place_peninsula IGNORE
    = NODE AREA ("place"=="peninsula")

  TYPE place_country
    = NODE ("place"=="country")

  TYPE place_state
    = NODE AREA ("place"=="state")

  TYPE place_region
    = NODE AREA ("place"=="region")

  TYPE place_county
    = NODE AREA ("place"=="county")

  // Do not delete the following types, they are required by the GenCityStreet import step
  TYPE place_millioncity
    = NODE AREA ("place"=="city" AND EXISTS "population" AND "population">1000000)
      ADMIN_REGION

  TYPE place_bigcity
    = NODE AREA ("place"=="city" AND EXISTS "population" AND "population">100000)
      ADMIN_REGION

  TYPE place_city
    = NODE AREA ("place"=="city")
      ADMIN_REGION

  TYPE place_town
    = NODE AREA ("place"=="town")
      ADMIN_REGION

  TYPE place_village
    = NODE AREA ("place"=="village")
      ADMIN_REGION

  TYPE place_hamlet
    = NODE AREA ("place"=="hamlet")
      ADMIN_REGION

  TYPE place_isolated_dwelling
    = NODE AREA ("place"=="isolated_dwelling")
      ADMIN_REGION

  TYPE place_suburb
    = NODE AREA ("place"=="suburb")
      ADMIN_REGION

  TYPE place_locality
    = NODE AREA ("place"=="locality")
      POI

  TYPE place_island
    = NODE AREA ("place"=="island")

  TYPE place_islet
    = NODE AREA ("place"=="islet")

  TYPE place_archipelago
    = RELATION ("type"=="multipolygon" AND "place"=="archipelago")
      MULTIPOLYGON


  //
  // Buildings
  //

  TYPE building_garage
    = AREA ("building"=="garage")

  TYPE building
    = AREA (EXISTS "building" AND !("building" IN ["no","false","0"]))

  // Addresses
  TYPE address
    = NODE AREA ((EXISTS "addr:street" OR EXISTS "addr:place") AND EXISTS "addr:housenumber")

  // Currently not supported by stylesheet
  TYPE barrier_hedge
    IGNORE
    = WAY AREA ("barrier"=="hedge")

  TYPE barrier_fence
    = WAY AREA ("barrier"=="fence")
    IGNORESEALAND

  TYPE barrier_wall
    = WAY AREA ("barrier"=="wall")
	IGNORESEALAND

  TYPE barrier_ditch
    IGNORE
    = WAY AREA ("barrier"=="ditch")

  TYPE barrier_retaining_wall
    = WAY AREA ("barrier"=="retaining_wall")
      IGNORESEALAND

  TYPE barrier_city_wall
    = WAY AREA ("barrier"=="city_wall" OR "historic"=="citywalls")

  TYPE barrier_bollard
    IGNORE
    = NODE WAY ("barrier"=="bollard")

  TYPE barrier_cycle_barrier
    IGNORE
    = NODE ("barrier"=="cycle_barrier")

  TYPE barrier_block
    IGNORE
    = NODE ("barrier"=="block")

  TYPE barrier_cattle_grid
    IGNORE
    = NODE ("barrier"=="cattle_grid")

  TYPE barrier_toll_booth
    IGNORE
    = NODE ("barrier"=="toll_booth")

  TYPE barrier_entrance
    IGNORE
    = NODE ("barrier"=="entrance")

  TYPE barrier_gate
    IGNORE
    = NODE WAY ("barrier"=="gate")

  TYPE barrier_lift_gate
    IGNORE
    = NODE ("barrier"=="lift_gate")

  TYPE barrier_stile
    IGNORE
    = NODE ("barrier"=="stile")

  TYPE barrier_sally_port
    IGNORE
    = NODE ("barrier"=="sally_port")

  TYPE barrier_kent_carriage_gate
    IGNORE
    = NODE ("barrier"=="kent_carriage_gate")

  // Types we currently ignore

  // This does increase the size of nodes data too much
  TYPE building_entrance  IGNORE
    = NODE ("building"=="entrance" OR EXISTS "entrance")

  TYPE street_any IGNORE
    = RELATION ("type"=="street")

  TYPE tunnel_any IGNORE
    = RELATION ("type"=="tunnel")

  TYPE bridge_any IGNORE
    = RELATION ("type"=="bridge")

  TYPE dual_carriageway_any IGNORE
    = RELATION ("type"=="dual_carriageway")

  TYPE waterway_any IGNORE
    = RELATION ("type"=="waterway")

  TYPE wayparts_any IGNORE
    = RELATION ("type"=="wayparts")

  TYPE associated_street_any IGNORE
    = RELATION ("type"=="associatedStreet")

  TYPE enforcement_any IGNORE
    = RELATION ("type"=="enforcement")

  TYPE roadAccess_any IGNORE
    = RELATION ("type"=="roadAccess")

  TYPE junction_any IGNORE
    = RELATION ("type"=="junction")

  TYPE label_any IGNORE
    = RELATION ("type"=="label")

  TYPE composite_Attribute_any IGNORE
    = RELATION ("type"=="composite_Attribute")

  TYPE segmented_tag_any IGNORE
    = RELATION ("type"=="segmented_tag")

  TYPE building_any IGNORE
    = RELATION ("type"=="building")

  TYPE related_building_any IGNORE
    = RELATION ("type"=="relatedBuilding")

  TYPE site_any IGNORE
    = RELATION ("type"=="site")

  TYPE station_any IGNORE
    = RELATION ("type"=="station")

  TYPE railway_halt_any IGNORE
    = RELATION ("type"=="railway_halt")

  TYPE line_any IGNORE
    = RELATION ("type"=="line")

  TYPE public_transport_any IGNORE
    = RELATION ("type"=="public_transport")

  TYPE public_transport_stop_area_group IGNORE
    = RELATION ("public_transport"=="stop_area_group")

  TYPE collection_any IGNORE
    = RELATION ("type"=="collection")

  TYPE network_any IGNORE
    = RELATION ("type"=="network")

  //
  // Route Masters and Routes
  // DO NOT CHANGE, INTERNAL CODE RELIES ON IT!

  // Aerialway

  TYPE routemaster_aerialway
    = RELATION ("type"=="route_master" AND "route_master"=="aerialway")
      ROUTE_MASTER

  TYPE route_aerialway
    = RELATION ("type"=="route" AND "route"=="aerialway")
      ROUTE

  // Bus

  TYPE routemaster_bus
    = RELATION ("type"=="route_master" AND "route_master"=="bus")
      ROUTE_MASTER

  TYPE route_bus
    = RELATION ("type"=="route" AND "route"=="bus")
      ROUTE

  // Ferry

  TYPE routemaster_ferry
    = RELATION ("type"=="route_master" AND "route_master"=="ferry")
      ROUTE_MASTER

  TYPE route_ferry
    = RELATION ("type"=="route" AND "route"=="ferry")
      ROUTE

  // Monorail

  TYPE routemaster_monorail
    = RELATION ("type"=="route_master" AND "route_master"=="monorail")
      ROUTE_MASTER

  TYPE route_monorail
    = RELATION ("type"=="route" AND "route"=="monorail")
      ROUTE

  // Subway

  TYPE routemaster_subway
    = RELATION ("type"=="route_master" AND "route_master"=="subway")
      ROUTE_MASTER

  TYPE route_subway
    = RELATION ("type"=="route" AND "route"=="subway")
      ROUTE

  // Train

  TYPE routemaster_train
    = RELATION ("type"=="route_master" AND "route_master"=="train")
      ROUTE_MASTER

  TYPE route_train
    = RELATION ("type"=="route" AND "route"=="train")
      ROUTE

  // Tram

  TYPE routemaster_tram
    = RELATION ("type"=="route_master" AND "route_master"=="tram")
      ROUTE_MASTER

  TYPE route_tram
    = RELATION ("type"=="route" AND "route"=="tram")
      ROUTE

  // Trolleybus

  TYPE routemaster_trolleybus
    = RELATION ("type"=="route_master" AND "route_master"=="trolleybus")
      ROUTE_MASTER

  TYPE route_trolleybus
    = RELATION ("type"=="route" AND "route"=="trolleybus")
      ROUTE

  TYPE route_bicycle
    = RELATION ("type"=="route" AND "route"=="bicycle")
      ROUTE

  TYPE route_mtb
    = RELATION ("type"=="route" AND "route"=="mtb")
      ROUTE

  TYPE route_hiking
    = RELATION ("type"=="route" AND "route"=="hiking")
      ROUTE

  TYPE route_skiing_nordic
    = RELATION ("type"=="route" AND ("route"=="ski" OR ("route"=="piste" AND "piste:type"=="nordic")))
      ROUTE

  // Catch-all fallback for other types

  TYPE routemaster_any IGNORE
    = RELATION ("type"=="route_master")

  TYPE route_any IGNORE
    = RELATION ("type"=="route")

  // --

  TYPE superroute_any IGNORE
    = RELATION ("type"=="superroute")

  TYPE netzwolf_route_any IGNORE
    = RELATION ("type"=="netzwolf-route")

  TYPE netzwolf_routemaster_any IGNORE
    = RELATION ("type"=="netzwolf:route_master")

  TYPE address IGNORE
    = RELATION ("type"=="address")

  TYPE border IGNORE
    = AREA RELATION ("type"=="border")

  TYPE postal_code IGNORE
    = AREA RELATION ("type"=="postal_code")

  TYPE organization IGNORE
    = AREA RELATION ("type"=="organization")

  TYPE boundary_civil IGNORE
    = AREA ("boundary"=="civil")

  TYPE boundary_maritime IGNORE
    = AREA RELATION ("boundary"=="maritime")

  TYPE boundary_political IGNORE
    = AREA ("boundary"=="political")

  TYPE boundary_postal_code IGNORE
    = AREA RELATION ("boundary"=="postal_code")

  TYPE place_any IGNORE
    = RELATION ("type"=="place")

  TYPE amt_any IGNORE
    = RELATION ("type"=="amt")

  TYPE suburb_any IGNORE
    = RELATION ("type"=="suburb")

  TYPE city_any IGNORE
    = RELATION ("type"=="city")

  TYPE town_any IGNORE
    = RELATION ("type"=="town")

  TYPE municipality_any IGNORE
    = RELATION ("type"=="municipality")

  TYPE district_any IGNORE
    = RELATION ("type"=="district")

  TYPE county_any IGNORE
    = RELATION ("type"=="county")

  TYPE state_any IGNORE
    = RELATION ("type"=="state")

  TYPE tmc_any IGNORE
    = AREA (EXISTS "TMC:cid_58:tabcd_1:Class") OR RELATION ("type"=="tmc" OR "type"=="TMC")

  TYPE lez_any IGNORE
    = RELATION ("type"=="LEZ")

  TYPE group_any IGNORE
    = RELATION ("type"=="group")

  TYPE set_any IGNORE
    = RELATION ("type"=="set")

  TYPE compound_any IGNORE
    = RELATION ("type"=="compound")
END
